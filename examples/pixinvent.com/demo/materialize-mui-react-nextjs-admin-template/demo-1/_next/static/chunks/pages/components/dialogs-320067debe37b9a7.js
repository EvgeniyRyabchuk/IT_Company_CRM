(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4827],{91103:function(n,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/components/dialogs",function(){return t(25166)}])},11534:function(n,e,t){"use strict";t.d(e,{Z:function(){return Z}});var o=t(85893),i=t(67294),a=t(87357),l=t(66242),r=t(34386),s=t(67720),c=t(57922),m=t(93946),u=t(78445),d=t(44267),p=t(96420),g=t(98396),h=t(33454),f=t(99770),x=t(90738),C=t(53917),D=t(93031),b=t(15660),j=t.n(b),y=t(74931),T=t(66485),k=t.n(T),v=function(n){return n&&("TEXTAREA"===n.nodeName||"INPUT"===n.nodeName)},B=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=(0,i.useRef)(null),t=function(){n.onSuccess&&n.onSuccess(),n.selectOnCopy&&v(e.current)&&e.current.select()},o=function(){n.onError&&n.onError(),!1!==n.selectOnError&&v(e.current)&&e.current.select()},a=function(n){k()(n).then(t).catch(o)},l=(0,i.useCallback)((function(n){"string"===typeof n?a(n):e.current&&a(e.current.value)}),[]);return{copy:l,target:e}};function S(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function I(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{},o=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})))),o.forEach((function(e){S(n,e,t[e])}))}return n}var Z=function(n){var e=n.id,t=n.sx,b=n.code,T=n.title,k=n.children,v=n.className,S=(0,i.useState)(!1),Z=S[0],O=S[1],w=(0,i.useState)(null!==b.tsx?"tsx":"jsx"),A=w[0],F=w[1],M=B(),L=(0,g.Z)((function(n){return n.breakpoints.down("md")}));(0,i.useEffect)((function(){j().highlightAll()}),[Z,A]);return(0,o.jsxs)(l.Z,{className:v,sx:I({"& .MuiCardHeader-action":{lineHeight:.8}},t),id:e||"card-snippet--".concat(T.toLowerCase().replace(/ /g,"-")),children:[(0,o.jsx)(u.Z,I({title:T,titleTypographyProps:{variant:"h6"}},L?{}:{action:(0,o.jsx)(m.Z,{onClick:function(){return O(!Z)},children:(0,o.jsx)(f.Z,{fontSize:"small"})})})),(0,o.jsx)(d.Z,{children:k}),L?null:(0,o.jsxs)(c.Z,{in:Z,children:[(0,o.jsx)(s.Z,{sx:{my:0}}),(0,o.jsxs)(d.Z,{sx:{position:"relative","& pre":{m:"0 !important",maxHeight:500}},children:[(0,o.jsx)(a.Z,{sx:{mb:4,display:"flex",alignItems:"center",justifyContent:"flex-end"},children:(0,o.jsxs)(h.Z,{exclusive:!0,size:"small",color:"primary",value:A,onChange:function(n,e){return null!==e?F(e):null},children:[null!==b.tsx?(0,o.jsx)(p.Z,{value:"tsx",children:(0,o.jsx)(D.Z,{fontSize:"small"})}):null,null!==b.jsx?(0,o.jsx)(p.Z,{value:"jsx",children:(0,o.jsx)(C.Z,{fontSize:"small"})}):null]})}),(0,o.jsx)(r.Z,{title:"Copy the source",placement:"top",children:(0,o.jsx)(m.Z,{onClick:function(){M.copy(null!==b.tsx&&"tsx"===A?b.tsx.props.children.props.children:null!==b.jsx&&"jsx"===A?b.jsx.props.children.props.children:""),y.ZP.success("The source code has been copied to your clipboard.",{duration:2e3})},sx:{top:"5rem",right:"2.5625rem",position:"absolute",color:function(n){return n.palette.grey[100]}},children:(0,o.jsx)(x.Z,{fontSize:"small"})})}),(0,o.jsx)(a.Z,{children:null!==b[A]?b[A]:null})]})]})]})}},25166:function(n,e,t){"use strict";t.r(e),t.d(e,{default:function(){return Dn}});var o=t(85893),i=t(86886),a=t(15861),l=t(11534),r=t(67294),s=t(11057),c=t(64666),m=t(50135),u=t(33090),d=t(6514),p=t(31425),g=t(58951),h=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=function(){return t(!1)};return(0,o.jsxs)(r.Fragment,{children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Open form dialog"}),(0,o.jsxs)(c.Z,{open:e,onClose:i,"aria-labelledby":"form-dialog-title",children:[(0,o.jsx)(u.Z,{id:"form-dialog-title",children:"Subscribe"}),(0,o.jsxs)(d.Z,{children:[(0,o.jsx)(g.Z,{sx:{mb:3},children:"To subscribe to this website, please enter your email address here. We will send updates occasionally."}),(0,o.jsx)(m.Z,{id:"name",autoFocus:!0,fullWidth:!0,type:"email",label:"Email Address"})]}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(s.Z,{onClick:i,children:"Disagree"}),(0,o.jsx)(s.Z,{onClick:i,children:"Agree"})]})]})]})},f=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=function(){return t(!1)};return(0,o.jsxs)(r.Fragment,{children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Open dialog"}),(0,o.jsxs)(c.Z,{open:e,onClose:i,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description",children:[(0,o.jsx)(u.Z,{id:"alert-dialog-title",children:"Use Google's location service?"}),(0,o.jsx)(d.Z,{children:(0,o.jsx)(g.Z,{id:"alert-dialog-description",children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."})}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(s.Z,{onClick:i,children:"Disagree"}),(0,o.jsx)(s.Z,{onClick:i,children:"Agree"})]})]})]})},x=t(72852),C=t(18972),D=t(47312),b=t(94054),j=t(11496),y=t(50480),T=t(18360),k=(0,j.ZP)("form")({margin:"auto",display:"flex",width:"fit-content",flexDirection:"column"}),v=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=(0,r.useState)(!0),a=i[0],l=i[1],m=(0,r.useState)("sm"),h=m[0],f=m[1],j=function(){return t(!1)};return(0,o.jsxs)(r.Fragment,{children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Open dialog"}),(0,o.jsxs)(c.Z,{open:e,maxWidth:h,fullWidth:a,onClose:j,"aria-labelledby":"max-width-dialog-title",children:[(0,o.jsx)(u.Z,{id:"max-width-dialog-title",children:"Optional sizes"}),(0,o.jsxs)(d.Z,{children:[(0,o.jsx)(g.Z,{sx:{mb:4},children:"You can set my maximum width and whether to adapt or not."}),(0,o.jsxs)(k,{noValidate:!0,children:[(0,o.jsxs)(b.Z,{sx:{mt:2,minWidth:120},children:[(0,o.jsx)(D.Z,{htmlFor:"max-width",children:"maxWidth"}),(0,o.jsxs)(T.Z,{label:"maxWidth",value:h,onChange:function(n){f(n.target.value)},inputProps:{name:"max-width",id:"max-width"},children:[(0,o.jsx)(C.Z,{value:!1,children:"false"}),(0,o.jsx)(C.Z,{value:"xs",children:"xs"}),(0,o.jsx)(C.Z,{value:"sm",children:"sm"}),(0,o.jsx)(C.Z,{value:"md",children:"md"}),(0,o.jsx)(C.Z,{value:"lg",children:"lg"}),(0,o.jsx)(C.Z,{value:"xl",children:"xl"})]})]}),(0,o.jsx)(y.Z,{label:"Full width",sx:{mt:2},control:(0,o.jsx)(x.Z,{checked:a,onChange:function(n){l(n.target.checked)}})})]})]}),(0,o.jsx)(p.Z,{className:"dialog-actions-dense",children:(0,o.jsx)(s.Z,{onClick:j,children:"Close"})})]})]})},B=t(78462),S=t(87952),I=t(19294),Z=t(59334),O=t(98619),w=t(18987),A=t(65834),F=t(99642),M=t(86836),L=["username@gmail.com","user02@gmail.com"],N=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=(0,r.useState)(L[1]),l=i[0],m=i[1],d=function(n){t(!1),m(n)};return(0,o.jsxs)("div",{children:[(0,o.jsxs)(a.Z,{variant:"subtitle1",sx:{mb:2},children:["Selected: ",l]}),(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Open simple dialog"}),(0,o.jsxs)(c.Z,{onClose:function(){return t(!1)},"aria-labelledby":"simple-dialog-title",open:e,children:[(0,o.jsx)(u.Z,{id:"simple-dialog-title",children:"Set backup account"}),(0,o.jsxs)(B.Z,{sx:{pt:0,px:"0 !important"},children:[L.map((function(n){return(0,o.jsx)(I.ZP,{disablePadding:!0,onClick:function(){return d(n)},children:(0,o.jsxs)(O.Z,{children:[(0,o.jsx)(w.Z,{children:(0,o.jsx)(M.Z,{skin:"light",children:(0,o.jsx)(F.Z,{})})}),(0,o.jsx)(Z.Z,{primary:n})]})},n)})),(0,o.jsx)(I.ZP,{disablePadding:!0,onClick:function(){return d("addAccount")},children:(0,o.jsxs)(O.Z,{children:[(0,o.jsx)(w.Z,{children:(0,o.jsx)(S.Z,{children:(0,o.jsx)(A.Z,{})})}),(0,o.jsx)(Z.Z,{primary:"Add account"})]})})]})]})]})};function W(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}function R(n){return function(n){if(Array.isArray(n))return W(n)}(n)||function(n){if("undefined"!==typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,e){if(!n)return;if("string"===typeof n)return W(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);"Object"===t&&n.constructor&&(t=n.constructor.name);if("Map"===t||"Set"===t)return Array.from(t);if("Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t))return W(n,e)}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var E=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=(0,r.useState)("paper"),a=i[0],l=i[1],m=(0,r.useRef)(null),h=function(n){return function(){t(!0),l(n)}},f=function(){return t(!1)};return(0,r.useEffect)((function(){if(e){var n=m.current;null!==n&&n.focus()}}),[e]),(0,o.jsxs)("div",{className:"demo-space-x",children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:h("paper"),children:"scroll=paper"}),(0,o.jsx)(s.Z,{variant:"outlined",onClick:h("body"),children:"scroll=body"}),(0,o.jsxs)(c.Z,{open:e,scroll:a,onClose:f,"aria-labelledby":"scroll-dialog-title","aria-describedby":"scroll-dialog-description",children:[(0,o.jsx)(u.Z,{id:"scroll-dialog-title",children:"Subscribe"}),(0,o.jsx)(d.Z,{dividers:"paper"===a,children:(0,o.jsx)(g.Z,{id:"scroll-dialog-description",ref:m,tabIndex:-1,children:R(new Array(50)).map((function(){return"Cotton candy sesame snaps toffee chupa chups caramels. Candy icing gummi bears pastry cake icing brownie\n                oat cake. Tootsie roll biscuit chupa chups apple pie muffin jelly-o caramels. Muffin chocolate bar sweet\n                cookie chupa chups."}))})}),(0,o.jsxs)(p.Z,{sx:{p:function(n){return"".concat(n.spacing(2.5)," !important")}},children:[(0,o.jsx)(s.Z,{onClick:f,children:"Cancel"}),(0,o.jsx)(s.Z,{onClick:f,children:"Subscribe"})]})]})]})},P=t(54776);function G(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}var z=(0,r.forwardRef)((function(n,e){return(0,o.jsx)(P.Z,function(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{},o=Object.keys(t);"function"===typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(t).filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})))),o.forEach((function(e){G(n,e,t[e])}))}return n}({direction:"up",ref:e},n))})),U=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=function(){return t(!1)};return(0,o.jsxs)(r.Fragment,{children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Slide in alert dialog"}),(0,o.jsxs)(c.Z,{open:e,keepMounted:!0,onClose:i,TransitionComponent:z,"aria-labelledby":"alert-dialog-slide-title","aria-describedby":"alert-dialog-slide-description",children:[(0,o.jsx)(u.Z,{id:"alert-dialog-slide-title",children:"Use Google's location service?"}),(0,o.jsx)(d.Z,{children:(0,o.jsx)(g.Z,{id:"alert-dialog-slide-description",children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."})}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(s.Z,{onClick:i,children:"Disagree"}),(0,o.jsx)(s.Z,{onClick:i,children:"Agree"})]})]})]})},J=t(93946),q=t(42734),_=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=function(){return t(!1)};return(0,o.jsxs)("div",{children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Open dialog"}),(0,o.jsxs)(c.Z,{onClose:i,"aria-labelledby":"customized-dialog-title",open:e,children:[(0,o.jsxs)(u.Z,{id:"customized-dialog-title",sx:{p:4},children:[(0,o.jsx)(a.Z,{variant:"h6",component:"span",children:"Modal title"}),(0,o.jsx)(J.Z,{"aria-label":"close",onClick:i,sx:{top:10,right:10,position:"absolute",color:function(n){return n.palette.grey[500]}},children:(0,o.jsx)(q.Z,{})})]}),(0,o.jsxs)(d.Z,{dividers:!0,sx:{p:4},children:[(0,o.jsx)(a.Z,{gutterBottom:!0,children:"Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels pastry."}),(0,o.jsx)(a.Z,{gutterBottom:!0,children:"Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish sugar plum. Gingerbread gummies marzipan gingerbread."}),(0,o.jsx)(a.Z,{gutterBottom:!0,children:"Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans chocolate bar chocolate marzipan candy fruitcake jujubes."})]}),(0,o.jsx)(p.Z,{sx:{p:function(n){return"".concat(n.spacing(3)," !important")}},children:(0,o.jsx)(s.Z,{onClick:i,children:"Save changes"})})]})]})},V=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=function(){return t(!1)};return(0,o.jsxs)("div",{children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Open dialog"}),(0,o.jsxs)(c.Z,{fullScreen:!0,onClose:i,"aria-labelledby":"full-screen-dialog-title",open:e,children:[(0,o.jsxs)(u.Z,{id:"full-screen-dialog-title",children:[(0,o.jsx)(a.Z,{variant:"h6",component:"span",children:"Modal title"}),(0,o.jsx)(J.Z,{"aria-label":"close",onClick:i,sx:{top:8,right:10,position:"absolute",color:function(n){return n.palette.grey[500]}},children:(0,o.jsx)(q.Z,{})})]}),(0,o.jsxs)(d.Z,{dividers:!0,children:[(0,o.jsx)(a.Z,{gutterBottom:!0,children:"Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels pastry."}),(0,o.jsx)(a.Z,{gutterBottom:!0,children:"Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish sugar plum. Gingerbread gummies marzipan gingerbread."}),(0,o.jsx)(a.Z,{gutterBottom:!0,children:"Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans chocolate bar chocolate marzipan candy fruitcake jujubes."})]}),(0,o.jsx)(p.Z,{sx:{p:function(n){return"".concat(n.spacing(3)," !important")}},children:(0,o.jsx)(s.Z,{onClick:i,children:"Save changes"})})]})]})},H=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=function(){return t(!1)};return(0,o.jsxs)(r.Fragment,{children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Open dialog"}),(0,o.jsxs)(c.Z,{open:e,disableEscapeKeyDown:!0,"aria-labelledby":"alert-dialog-title","aria-describedby":"alert-dialog-description",onClose:function(n,e){"backdropClick"!==e&&i()},children:[(0,o.jsx)(u.Z,{id:"alert-dialog-title",children:"Use Google's location service?"}),(0,o.jsx)(d.Z,{children:(0,o.jsx)(g.Z,{id:"alert-dialog-description",children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."})}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(s.Z,{onClick:i,children:"Disagree"}),(0,o.jsx)(s.Z,{onClick:i,children:"Agree"})]})]})]})},Q=t(2734),Y=t(98396),K=function(){var n=(0,r.useState)(!1),e=n[0],t=n[1],i=(0,Q.Z)(),a=(0,Y.Z)(i.breakpoints.down("sm")),l=function(){return t(!1)};return(0,o.jsxs)(r.Fragment,{children:[(0,o.jsx)(s.Z,{variant:"outlined",onClick:function(){return t(!0)},children:"Open responsive dialog"}),(0,o.jsxs)(c.Z,{fullScreen:a,open:e,onClose:l,"aria-labelledby":"responsive-dialog-title",children:[(0,o.jsx)(u.Z,{id:"responsive-dialog-title",children:"Use Google's location service?"}),(0,o.jsx)(d.Z,{children:(0,o.jsx)(g.Z,{children:"Let Google help apps determine location. This means sending anonymous location data to Google, even when no apps are running."})}),(0,o.jsxs)(p.Z,{className:"dialog-actions-dense",children:[(0,o.jsx)(s.Z,{onClick:l,children:"Disagree"}),(0,o.jsx)(s.Z,{onClick:l,children:"Agree"})]})]})]})},X=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogConfirmation = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        disableEscapeKeyDown\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n        onClose={(event, reason) => {\n          if (reason !== 'backdropClick') {\n            handleClose()\n          }\n        }}\n      >\n        <DialogTitle id='alert-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogConfirmation\n"})}),$=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\n\n// ** Icons Imports\nimport Close from 'mdi-material-ui/Close'\n\nconst DialogCustomized = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <div>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog onClose={handleClose} aria-labelledby='customized-dialog-title' open={open}>\n        <DialogTitle id='customized-dialog-title' sx={{ p: 4 }}>\n          <Typography variant='h6' component='span'>\n            Modal title\n          </Typography>\n          <IconButton\n            aria-label='close'\n            onClick={handleClose}\n            sx={{ top: 10, right: 10, position: 'absolute', color: theme => theme.palette.grey[500] }}\n          >\n            <Close />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers sx={{ p: 4 }}>\n          <Typography gutterBottom>\n            Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate\n            cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels\n            pastry.\n          </Typography>\n          <Typography gutterBottom>\n            Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish\n            sugar plum. Gingerbread gummies marzipan gingerbread.\n          </Typography>\n          <Typography gutterBottom>\n            Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans\n            chocolate bar chocolate marzipan candy fruitcake jujubes.\n          </Typography>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(3)} !important }}>\n          <Button onClick={handleClose}>Save changes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogCustomized\n"})}),nn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogAlert = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogAlert\n"})}),en=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\n\n// ** Icons Imports\nimport Close from 'mdi-material-ui/Close'\n\nconst DialogFullScreen = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <div>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog fullScreen onClose={handleClose} aria-labelledby='full-screen-dialog-title' open={open}>\n        <DialogTitle id='full-screen-dialog-title'>\n          <Typography variant='h6' component='span'>\n            Modal title\n          </Typography>\n          <IconButton\n            aria-label='close'\n            onClick={handleClose}\n            sx={{ top: 8, right: 10, position: 'absolute', color: theme => theme.palette.grey[500] }}\n          >\n            <Close />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate\n            cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels\n            pastry.\n          </Typography>\n          <Typography gutterBottom>\n            Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish\n            sugar plum. Gingerbread gummies marzipan gingerbread.\n          </Typography>\n          <Typography gutterBottom>\n            Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans\n            chocolate bar chocolate marzipan candy fruitcake jujubes.\n          </Typography>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(3)} !important }}>\n          <Button onClick={handleClose}>Save changes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogFullScreen\n"})}),tn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Switch from '@mui/material/Switch'\nimport Dialog from '@mui/material/Dialog'\nimport MenuItem from '@mui/material/MenuItem'\nimport InputLabel from '@mui/material/InputLabel'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport FormControl from '@mui/material/FormControl'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport { styled } from '@mui/material/styles'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport Select from '@mui/material/Select'\n\n// Styled component for the form\nconst Form = styled('form')({\n  margin: 'auto',\n  display: 'flex',\n  width: 'fit-content',\n  flexDirection: 'column'\n})\n\nconst DialogSizes = () => {\n  // ** States\n  const [open, setOpen] = useState(false)\n  const [fullWidth, setFullWidth] = useState(true)\n  const [maxWidth, setMaxWidth] = useState('sm')\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  const handleMaxWidthChange = event => {\n    setMaxWidth(event.target.value)\n  }\n\n  const handleFullWidthChange = event => {\n    setFullWidth(event.target.checked)\n  }\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        maxWidth={maxWidth}\n        fullWidth={fullWidth}\n        onClose={handleClose}\n        aria-labelledby='max-width-dialog-title'\n      >\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 4 }}>\n            You can set my maximum width and whether to adapt or not.\n          </DialogContentText>\n          <Form noValidate>\n            <FormControl sx={{ mt: 2, minWidth: 120 }}>\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\n              <Select\n                label='maxWidth'\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width'\n                }}\n              >\n                <MenuItem value={false}>false</MenuItem>\n                <MenuItem value='xs'>xs</MenuItem>\n                <MenuItem value='sm'>sm</MenuItem>\n                <MenuItem value='md'>md</MenuItem>\n                <MenuItem value='lg'>lg</MenuItem>\n                <MenuItem value='xl'>xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              label='Full width'\n              sx={{ mt: 2 }}\n              control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />}\n            />\n          </Form>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogSizes\n"})}),on=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport { useTheme } from '@mui/material/styles'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogRespoFullScreen = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n\n  // ** Hooks\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'))\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open responsive dialog\n      </Button>\n      <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby='responsive-dialog-title'>\n        <DialogTitle id='responsive-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogRespoFullScreen\n"})}),an=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport List from '@mui/material/List'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport MuiAvatar from '@mui/material/Avatar'\nimport ListItem from '@mui/material/ListItem'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport ListItemText from '@mui/material/ListItemText'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\n\n// ** Icons Imports\nimport Plus from 'mdi-material-ui/Plus'\nimport AccountOutline from 'mdi-material-ui/AccountOutline'\n\n// ** Custom Components Imports\nimport CustomAvatar from 'src/@core/components/mui/avatar'\n\nconst emails = ['username@gmail.com', 'user02@gmail.com']\n\nconst DialogSimple = () => {\n  // ** States\n  const [open, setOpen] = useState(false)\n  const [selectedValue, setSelectedValue] = useState(emails[1])\n  const handleClickOpen = () => setOpen(true)\n  const handleDialogClose = () => setOpen(false)\n\n  const handleClose = value => {\n    setOpen(false)\n    setSelectedValue(value)\n  }\n\n  return (\n    <div>\n      <Typography variant='subtitle1' sx={{ mb: 2 }}>\n        Selected: {selectedValue}\n      </Typography>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <Dialog onClose={handleDialogClose} aria-labelledby='simple-dialog-title' open={open}>\n        <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\n        <List sx={{ pt: 0, px: '0 !important' }}>\n          {emails.map(email => (\n            <ListItem key={email} disablePadding onClick={() => handleClose(email)}>\n              <ListItemButton>\n                <ListItemAvatar>\n                  <CustomAvatar skin='light'>\n                    <AccountOutline />\n                  </CustomAvatar>\n                </ListItemAvatar>\n                <ListItemText primary={email} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n          <ListItem disablePadding onClick={() => handleClose('addAccount')}>\n            <ListItemButton>\n              <ListItemAvatar>\n                <MuiAvatar>\n                  <Plus />\n                </MuiAvatar>\n              </ListItemAvatar>\n              <ListItemText primary='Add account' />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogSimple\n"})}),ln=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { forwardRef, Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Slide from '@mui/material/Slide'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst Transition = forwardRef(function Transition(props, ref) {\n  return <Slide direction='up' ref={ref} {...props} />\n})\n\nconst DialogTransition = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        keepMounted\n        onClose={handleClose}\n        TransitionComponent={Transition}\n        aria-labelledby='alert-dialog-slide-title'\n        aria-describedby='alert-dialog-slide-description'\n      >\n        <DialogTitle id='alert-dialog-slide-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-slide-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogTransition\n"})}),rn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useEffect, useRef, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Dialog from '@mui/material/Dialog'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogsScroll = () => {\n  // ** States\n  const [open, setOpen] = useState(false)\n  const [scroll, setScroll] = useState('paper')\n\n  // ** Ref\n  const descriptionElementRef = useRef(null)\n\n  const handleClickOpen = scrollType => () => {\n    setOpen(true)\n    setScroll(scrollType)\n  }\n  const handleClose = () => setOpen(false)\n  useEffect(() => {\n    if (open) {\n      const { current: descriptionElement } = descriptionElementRef\n      if (descriptionElement !== null) {\n        descriptionElement.focus()\n      }\n    }\n  }, [open])\n\n  return (\n    <div className='demo-space-x'>\n      <Button variant='outlined' onClick={handleClickOpen('paper')}>\n        scroll=paper\n      </Button>\n      <Button variant='outlined' onClick={handleClickOpen('body')}>\n        scroll=body\n      </Button>\n      <Dialog\n        open={open}\n        scroll={scroll}\n        onClose={handleClose}\n        aria-labelledby='scroll-dialog-title'\n        aria-describedby='scroll-dialog-description'\n      >\n        <DialogTitle id='scroll-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent dividers={scroll === 'paper'}>\n          <DialogContentText id='scroll-dialog-description' ref={descriptionElementRef} tabIndex={-1}>\n            {[...new Array(50)].map(\n              () => Cotton candy sesame snaps toffee chupa chups caramels. Candy icing gummi bears pastry cake icing brownie\n                oat cake. Tootsie roll biscuit chupa chups apple pie muffin jelly-o caramels. Muffin chocolate bar sweet\n                cookie chupa chups.\n            )}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(2.5)} !important }}>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleClose}>Subscribe</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogsScroll\n"})}),sn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport TextField from '@mui/material/TextField'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogForm = () => {\n  // ** State\n  const [open, setOpen] = useState(false)\n  const handleClickOpen = () => setOpen(true)\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 3 }}>\n            To subscribe to this website, please enter your email address here. We will send updates occasionally.\n          </DialogContentText>\n          <TextField id='name' autoFocus fullWidth type='email' label='Email Address' />\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogForm\n"})}),cn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogAlert = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n      >\n        <DialogTitle id='alert-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogAlert\n"})}),mn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\n\n// ** Icons Imports\nimport Close from 'mdi-material-ui/Close'\n\nconst DialogCustomized = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <div>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog onClose={handleClose} aria-labelledby='customized-dialog-title' open={open}>\n        <DialogTitle id='customized-dialog-title' sx={{ p: 4 }}>\n          <Typography variant='h6' component='span'>\n            Modal title\n          </Typography>\n          <IconButton\n            aria-label='close'\n            onClick={handleClose}\n            sx={{ top: 10, right: 10, position: 'absolute', color: theme => theme.palette.grey[500] }}\n          >\n            <Close />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers sx={{ p: 4 }}>\n          <Typography gutterBottom>\n            Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate\n            cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels\n            pastry.\n          </Typography>\n          <Typography gutterBottom>\n            Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish\n            sugar plum. Gingerbread gummies marzipan gingerbread.\n          </Typography>\n          <Typography gutterBottom>\n            Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans\n            chocolate bar chocolate marzipan candy fruitcake jujubes.\n          </Typography>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(3)} !important }}>\n          <Button onClick={handleClose}>Save changes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogCustomized\n"})}),un=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogConfirmation = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        disableEscapeKeyDown\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n        onClose={(event, reason) => {\n          if (reason !== 'backdropClick') {\n            handleClose()\n          }\n        }}\n      >\n        <DialogTitle id='alert-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogConfirmation\n"})}),dn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport IconButton from '@mui/material/IconButton'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\n\n// ** Icons Imports\nimport Close from 'mdi-material-ui/Close'\n\nconst DialogFullScreen = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <div>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog fullScreen onClose={handleClose} aria-labelledby='full-screen-dialog-title' open={open}>\n        <DialogTitle id='full-screen-dialog-title'>\n          <Typography variant='h6' component='span'>\n            Modal title\n          </Typography>\n          <IconButton\n            aria-label='close'\n            onClick={handleClose}\n            sx={{ top: 8, right: 10, position: 'absolute', color: theme => theme.palette.grey[500] }}\n          >\n            <Close />\n          </IconButton>\n        </DialogTitle>\n        <DialogContent dividers>\n          <Typography gutterBottom>\n            Chupa chups jelly-o candy sweet roll wafer cake chocolate bar. Brownie sweet roll topping cake chocolate\n            cake cheesecake tiramisu chocolate cake. Jujubes liquorice chocolate bar pastry. Chocolate jujubes caramels\n            pastry.\n          </Typography>\n          <Typography gutterBottom>\n            Ice cream marshmallow drag\xe9e bonbon croissant. Carrot cake sweet donut ice cream bonbon oat cake danish\n            sugar plum. Gingerbread gummies marzipan gingerbread.\n          </Typography>\n          <Typography gutterBottom>\n            Souffl\xe9 toffee ice cream. Jelly-o pudding sweet roll bonbon. Marshmallow liquorice icing. Jelly beans\n            chocolate bar chocolate marzipan candy fruitcake jujubes.\n          </Typography>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(3)} !important }}>\n          <Button onClick={handleClose}>Save changes</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogFullScreen\n"})}),pn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useState } from 'react'\n\n// ** MUI Imports\nimport List from '@mui/material/List'\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport MuiAvatar from '@mui/material/Avatar'\nimport ListItem from '@mui/material/ListItem'\nimport Typography from '@mui/material/Typography'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport ListItemText from '@mui/material/ListItemText'\nimport ListItemButton from '@mui/material/ListItemButton'\nimport ListItemAvatar from '@mui/material/ListItemAvatar'\n\n// ** Icons Imports\nimport Plus from 'mdi-material-ui/Plus'\nimport AccountOutline from 'mdi-material-ui/AccountOutline'\n\n// ** Custom Components Imports\nimport CustomAvatar from 'src/@core/components/mui/avatar'\n\nconst emails = ['username@gmail.com', 'user02@gmail.com']\n\nconst DialogSimple = () => {\n  // ** States\n  const [open, setOpen] = useState<boolean>(false)\n  const [selectedValue, setSelectedValue] = useState<string>(emails[1])\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleDialogClose = () => setOpen(false)\n\n  const handleClose = (value: string) => {\n    setOpen(false)\n    setSelectedValue(value)\n  }\n\n  return (\n    <div>\n      <Typography variant='subtitle1' sx={{ mb: 2 }}>\n        Selected: {selectedValue}\n      </Typography>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open simple dialog\n      </Button>\n      <Dialog onClose={handleDialogClose} aria-labelledby='simple-dialog-title' open={open}>\n        <DialogTitle id='simple-dialog-title'>Set backup account</DialogTitle>\n        <List sx={{ pt: 0, px: '0 !important' }}>\n          {emails.map(email => (\n            <ListItem key={email} disablePadding onClick={() => handleClose(email)}>\n              <ListItemButton>\n                <ListItemAvatar>\n                  <CustomAvatar skin='light'>\n                    <AccountOutline />\n                  </CustomAvatar>\n                </ListItemAvatar>\n                <ListItemText primary={email} />\n              </ListItemButton>\n            </ListItem>\n          ))}\n          <ListItem disablePadding onClick={() => handleClose('addAccount')}>\n            <ListItemButton>\n              <ListItemAvatar>\n                <MuiAvatar>\n                  <Plus />\n                </MuiAvatar>\n              </ListItemAvatar>\n              <ListItemText primary='Add account' />\n            </ListItemButton>\n          </ListItem>\n        </List>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogSimple\n"})}),gn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState, ChangeEvent } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Switch from '@mui/material/Switch'\nimport Dialog from '@mui/material/Dialog'\nimport MenuItem from '@mui/material/MenuItem'\nimport InputLabel from '@mui/material/InputLabel'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport FormControl from '@mui/material/FormControl'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport { styled, Breakpoint } from '@mui/material/styles'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport DialogContentText from '@mui/material/DialogContentText'\nimport Select, { SelectChangeEvent } from '@mui/material/Select'\n\n// Styled component for the form\nconst Form = styled('form')({\n  margin: 'auto',\n  display: 'flex',\n  width: 'fit-content',\n  flexDirection: 'column'\n})\n\nconst DialogSizes = () => {\n  // ** States\n  const [open, setOpen] = useState<boolean>(false)\n  const [fullWidth, setFullWidth] = useState<boolean>(true)\n  const [maxWidth, setMaxWidth] = useState<Breakpoint>('sm')\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  const handleMaxWidthChange = (event: SelectChangeEvent) => {\n    setMaxWidth(event.target.value as Breakpoint)\n  }\n\n  const handleFullWidthChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setFullWidth(event.target.checked)\n  }\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open dialog\n      </Button>\n      <Dialog\n        open={open}\n        maxWidth={maxWidth}\n        fullWidth={fullWidth}\n        onClose={handleClose}\n        aria-labelledby='max-width-dialog-title'\n      >\n        <DialogTitle id='max-width-dialog-title'>Optional sizes</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 4 }}>\n            You can set my maximum width and whether to adapt or not.\n          </DialogContentText>\n          <Form noValidate>\n            <FormControl sx={{ mt: 2, minWidth: 120 }}>\n              <InputLabel htmlFor='max-width'>maxWidth</InputLabel>\n              <Select\n                label='maxWidth'\n                value={maxWidth}\n                onChange={handleMaxWidthChange}\n                inputProps={{\n                  name: 'max-width',\n                  id: 'max-width'\n                }}\n              >\n                <MenuItem value={false as any}>false</MenuItem>\n                <MenuItem value='xs'>xs</MenuItem>\n                <MenuItem value='sm'>sm</MenuItem>\n                <MenuItem value='md'>md</MenuItem>\n                <MenuItem value='lg'>lg</MenuItem>\n                <MenuItem value='xl'>xl</MenuItem>\n              </Select>\n            </FormControl>\n            <FormControlLabel\n              label='Full width'\n              sx={{ mt: 2 }}\n              control={<Switch checked={fullWidth} onChange={handleFullWidthChange} />}\n            />\n          </Form>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogSizes\n"})}),hn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport { useTheme } from '@mui/material/styles'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport useMediaQuery from '@mui/material/useMediaQuery'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogRespoFullScreen = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  // ** Hooks\n  const theme = useTheme()\n  const fullScreen = useMediaQuery(theme.breakpoints.down('sm'))\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open responsive dialog\n      </Button>\n      <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby='responsive-dialog-title'>\n        <DialogTitle id='responsive-dialog-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogRespoFullScreen\n"})}),fn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { forwardRef, Fragment, ReactElement, Ref, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Slide, { SlideProps } from '@mui/material/Slide'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst Transition = forwardRef(function Transition(\n  props: SlideProps & { children?: ReactElement<any, any> },\n  ref: Ref<unknown>\n) {\n  return <Slide direction='up' ref={ref} {...props} />\n})\n\nconst DialogTransition = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Slide in alert dialog\n      </Button>\n      <Dialog\n        open={open}\n        keepMounted\n        onClose={handleClose}\n        TransitionComponent={Transition}\n        aria-labelledby='alert-dialog-slide-title'\n        aria-describedby='alert-dialog-slide-description'\n      >\n        <DialogTitle id='alert-dialog-slide-title'>Use Google's location service?</DialogTitle>\n        <DialogContent>\n          <DialogContentText id='alert-dialog-slide-description'>\n            Let Google help apps determine location. This means sending anonymous location data to Google, even when no\n            apps are running.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogTransition\n"})}),xn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { useEffect, useRef, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport Dialog, { DialogProps } from '@mui/material/Dialog'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogsScroll = () => {\n  // ** States\n  const [open, setOpen] = useState<boolean>(false)\n  const [scroll, setScroll] = useState<DialogProps['scroll']>('paper')\n\n  // ** Ref\n  const descriptionElementRef = useRef<HTMLElement>(null)\n\n  const handleClickOpen = (scrollType: DialogProps['scroll']) => () => {\n    setOpen(true)\n    setScroll(scrollType)\n  }\n\n  const handleClose = () => setOpen(false)\n\n  useEffect(() => {\n    if (open) {\n      const { current: descriptionElement } = descriptionElementRef\n      if (descriptionElement !== null) {\n        descriptionElement.focus()\n      }\n    }\n  }, [open])\n\n  return (\n    <div className='demo-space-x'>\n      <Button variant='outlined' onClick={handleClickOpen('paper')}>\n        scroll=paper\n      </Button>\n      <Button variant='outlined' onClick={handleClickOpen('body')}>\n        scroll=body\n      </Button>\n      <Dialog\n        open={open}\n        scroll={scroll}\n        onClose={handleClose}\n        aria-labelledby='scroll-dialog-title'\n        aria-describedby='scroll-dialog-description'\n      >\n        <DialogTitle id='scroll-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent dividers={scroll === 'paper'}>\n          <DialogContentText id='scroll-dialog-description' ref={descriptionElementRef} tabIndex={-1}>\n            {[...new Array(50)].map(\n              () =>\n                Cotton candy sesame snaps toffee chupa chups caramels. Candy icing gummi bears pastry cake icing brownie\n                oat cake. Tootsie roll biscuit chupa chups apple pie muffin jelly-o caramels. Muffin chocolate bar sweet\n                cookie chupa chups.\n            )}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions sx={{ p: theme => {theme.spacing(2.5)} !important }}>\n          <Button onClick={handleClose}>Cancel</Button>\n          <Button onClick={handleClose}>Subscribe</Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default DialogsScroll\n"})}),Cn=(0,o.jsx)("pre",{className:"language-jsx",children:(0,o.jsx)("code",{className:"language-jsx",children:"// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** MUI Imports\nimport Button from '@mui/material/Button'\nimport Dialog from '@mui/material/Dialog'\nimport TextField from '@mui/material/TextField'\nimport DialogTitle from '@mui/material/DialogTitle'\nimport DialogContent from '@mui/material/DialogContent'\nimport DialogActions from '@mui/material/DialogActions'\nimport DialogContentText from '@mui/material/DialogContentText'\n\nconst DialogForm = () => {\n  // ** State\n  const [open, setOpen] = useState<boolean>(false)\n\n  const handleClickOpen = () => setOpen(true)\n\n  const handleClose = () => setOpen(false)\n\n  return (\n    <Fragment>\n      <Button variant='outlined' onClick={handleClickOpen}>\n        Open form dialog\n      </Button>\n      <Dialog open={open} onClose={handleClose} aria-labelledby='form-dialog-title'>\n        <DialogTitle id='form-dialog-title'>Subscribe</DialogTitle>\n        <DialogContent>\n          <DialogContentText sx={{ mb: 3 }}>\n            To subscribe to this website, please enter your email address here. We will send updates occasionally.\n          </DialogContentText>\n          <TextField id='name' autoFocus fullWidth type='email' label='Email Address' />\n        </DialogContent>\n        <DialogActions className='dialog-actions-dense'>\n          <Button onClick={handleClose}>Disagree</Button>\n          <Button onClick={handleClose}>Agree</Button>\n        </DialogActions>\n      </Dialog>\n    </Fragment>\n  )\n}\n\nexport default DialogForm\n"})}),Dn=function(){return(0,o.jsxs)(i.ZP,{container:!0,spacing:6,className:"match-height",children:[(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Simple Dialog",code:{tsx:pn,jsx:an},children:[(0,o.jsxs)(a.Z,{sx:{mb:4},children:["Manage ",(0,o.jsx)("code",{children:"open"})," prop with the help of a state."]}),(0,o.jsx)(N,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Alerts",code:{tsx:cn,jsx:nn},children:[(0,o.jsx)(a.Z,{sx:{mb:4},children:"Show an alert to the user to convey something or make the user choose from the given options."}),(0,o.jsx)(f,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Transitions",code:{tsx:fn,jsx:ln},children:[(0,o.jsxs)(a.Z,{sx:{mb:4},children:["You can also use any of the transitions that you like. Use ",(0,o.jsx)("code",{children:"TransitionComponent"})," prop for the transition."]}),(0,o.jsx)(U,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Form Dialog",code:{tsx:Cn,jsx:sn},children:[(0,o.jsx)(a.Z,{sx:{mb:4},children:"Form dialogs allow users to fill out form fields within a dialog."}),(0,o.jsx)(h,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Customized Dialog",code:{tsx:mn,jsx:$},children:[(0,o.jsxs)(a.Z,{sx:{mb:4},children:["You can customize the component the way you want using ",(0,o.jsx)("code",{children:"styled"})," hook."]}),(0,o.jsx)(_,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Full Screen Dialog",code:{tsx:dn,jsx:en},children:[(0,o.jsxs)(a.Z,{sx:{mb:4},children:["Add ",(0,o.jsx)("code",{children:"fullScreen"})," prop with ",(0,o.jsx)("code",{children:"Dialog"})," component for a full screen dialog."]}),(0,o.jsx)(V,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Optional Sizes",code:{tsx:gn,jsx:tn},children:[(0,o.jsxs)(a.Z,{sx:{mb:4},children:["You can set a dialog maximum width by using the ",(0,o.jsx)("code",{children:"maxWidth"})," enumerable in combination with the"," ",(0,o.jsx)("code",{children:"fullWidth"})," boolean. When the ",(0,o.jsx)("code",{children:"fullWidth"})," property is true, the dialog will adapt based on the ",(0,o.jsx)("code",{children:"maxWidth"})," value."]}),(0,o.jsx)(v,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Responsive full-screen",code:{tsx:hn,jsx:on},children:[(0,o.jsxs)(a.Z,{sx:{mb:4},children:["Make a full screen dialog at particular screen sizes only by using ",(0,o.jsx)("code",{children:"useMediaQuery"})," hook."]}),(0,o.jsx)(K,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Confirmation Dialog",code:{tsx:un,jsx:X},children:[(0,o.jsxs)(a.Z,{sx:{mb:4},children:["Use ",(0,o.jsx)("code",{children:"disableEscapeKeyDown"})," prop to disable 'Escape' key and use ",(0,o.jsx)("code",{children:"onClose"})," prop to disable the backdrop."]}),(0,o.jsx)(H,{})]})}),(0,o.jsx)(i.ZP,{item:!0,xs:12,md:6,children:(0,o.jsxs)(l.Z,{title:"Scrolling Long Content",code:{tsx:xn,jsx:rn},children:[(0,o.jsxs)(a.Z,{children:[(0,o.jsx)("code",{children:"scroll=paper"})," scrolls within the paper element and ",(0,o.jsx)("code",{children:"scroll=body"})," scrolls within the body element."]}),(0,o.jsx)(E,{})]})})]})}}},function(n){n.O(0,[4386,5878,5744,9774,2888,179],(function(){return e=91103,n(n.s=e);var e}));var e=n.O();_N_E=e}]);